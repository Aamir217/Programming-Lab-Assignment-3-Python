import cv2
import numpy as np
import matplotlib.pyplot as plt

# Function to load a grayscale image
def load_image(path):
    image = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
    return image

# Function to calculate basic statistics of an image
def calculate_statistics(image):
    mean_val = np.mean(image)
    std_val = np.std(image)
    min_val = np.min(image)
    max_val = np.max(image)
    return {
        'mean': mean_val,
        'std': std_val,
        'min': min_val,
        'max': max_val
    }

# Function to plot histogram of pixel intensities
def plot_histogram(image):
    plt.hist(image.ravel(), bins=256, range=[0, 256], color='black', alpha=0.75)
    plt.title('Histogram of Pixel Intensities')
    plt.xlabel('Pixel Intensity')
    plt.ylabel('Frequency')
    plt.show()

# Function to resize the image by taking every other pixel
def resize_image(image):
    height, width = image.shape
    resized_image = image[::2, ::2]
    return resized_image

# Function to rotate the image 90 degrees clockwise
def rotate_image(image):
    return np.rot90(image, k=-1)

# Function to display original, resized, and rotated images
def display_images(original, resized, rotated):
    plt.figure(figsize=(12, 4))
    plt.subplot(1, 3, 1)
    plt.title('Original Image')
    plt.imshow(original, cmap='gray')
    plt.axis('off')
    plt.subplot(1, 3, 2)
    plt.title('Resized Image')
    plt.imshow(resized, cmap='gray')
    plt.axis('off')
    plt.subplot(1, 3, 3)
    plt.title('Rotated Image')
    plt.imshow(rotated, cmap='gray')
    plt.axis('off')
    plt.show()

# Function to perform Singular Value Decomposition (SVD)
def perform_svd(image):
    U, s, VT = np.linalg.svd(image, full_matrices=False)
    S = np.diag(s)
    return U, S, VT

# Function to compress the image using k singular values
def compress_image(U, S, VT, k):
    Uk = U[:, :k]
    Sk = S[:k, :k]
    VTk = VT[:k, :]
    return np.dot(Uk, np.dot(Sk, VTk))

# Function to plot original and compressed images
def plot_compressed_images(original, compressed_images, k_values):
    plt.figure(figsize=(15, 5))
    plt.subplot(1, len(compressed_images) + 1, 1)
    plt.title('Original Image')
    plt.imshow(original, cmap='gray')
    plt.axis('off')
    for i, (compressed, k) in enumerate(zip(compressed_images, k_values), start=2):
        plt.subplot(1, len(compressed_images) + 1, i)
        plt.title(f'k={k}')
        plt.imshow(compressed, cmap='gray')
        plt.axis('off')
    plt.show()

# Main execution
image_path = './image.jpg'
image = load_image(image_path)

# Calculate and print image statistics
stats = calculate_statistics(image)
print("Image Statistics:", stats)

# Plot histogram of pixel intensities
plot_histogram(image)

# Resize and rotate the image
resized_image = resize_image(image)
rotated_image = rotate_image(resized_image)

# Display original, resized, and rotated images
display_images(image, resized_image, rotated_image)

# Perform SVD on the image
U, S, VT = perform_svd(image)

# Compress the image using different k values
k_values = [10, 20, 50]
compressed_images = [compress_image(U, S, VT, k) for k in k_values]

# Plot original and compressed images
plot_compressed_images(image, compressed_images, k_values)

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image using OpenCV
image = cv2.imread('image.png', cv2.IMREAD_GRAYSCALE)  # Load as grayscale for simplicity

# Convert the image to a NumPy array
image_array = np.array(image)

# a. Calculate Mean, Standard deviation, Minimum and Maximum pixel values
mean = np.mean(image_array)
std_dev = np.std(image_array)
min_val = np.min(image_array)
max_val = np.max(image_array)

print(f"Mean: {mean}, Standard Deviation: {std_dev}, Min: {min_val}, Max: {max_val}")

# b. Plot the histogram of pixel intensities
plt.figure(figsize=(10, 4))
plt.hist(image_array.ravel(), bins=256, color='gray', alpha=0.7)
plt.title('Histogram of Pixel Intensities')
plt.xlabel('Pixel Intensity')
plt.ylabel('Frequency')
plt.show()

# c. Resize the image to half of its original dimensions using NumPy operations
rows, cols = image_array.shape
resized_image = image_array[::2, ::2]  # Halving the dimensions

# d. Perform a rotation of 90 degrees clockwise on the resized image
rotated_image = np.rot90(resized_image, k=-1)  # k=-1 rotates 90 degrees clockwise

# e. Display the original, resized, and rotated images side by side using Matplotlib
plt.figure(figsize=(12, 4))

plt.subplot(1, 3, 1)
plt.title("Original Image")
plt.imshow(image_array, cmap='gray')
plt.axis('off')

plt.subplot(1, 3, 2)
plt.title("Resized Image")
plt.imshow(resized_image, cmap='gray')
plt.axis('off')

plt.subplot(1, 3, 3)
plt.title("Rotated Image")
plt.imshow(rotated_image, cmap='gray')
plt.axis('off')

plt.show()

# f. Perform SVD on the image matrix
U, S, Vt = np.linalg.svd(image_array, full_matrices=False)

# g. Retain only the top-k singular values and reconstruct the image
k_values = [10, 20, 50]
reconstructed_images = []
for k in k_values:
    S_k = np.zeros_like(S)
    S_k[:k] = S[:k]
    S_k_matrix = np.diag(S_k)
    compressed_image = np.dot(U, np.dot(S_k_matrix, Vt))
    reconstructed_images.append(compressed_image)

# h. Plot the original image and the compressed versions using Matplotlib
plt.figure(figsize=(16, 4))

plt.subplot(1, len(k_values) + 1, 1)
plt.title("Original Image")
plt.imshow(image_array, cmap='gray')
plt.axis('off')

for i, k in enumerate(k_values):
    plt.subplot(1, len(k_values) + 1, i + 2)
    plt.title(f"Compressed Image (k={k})")
    plt.imshow(reconstructed_images[i], cmap='gray')
    plt.axis('off')

plt.show()
